name: Rebase Upstream
description: Use git rebase to sync with upstream
author: AtaraxiaSjel
branding:
  icon: git-pull-request
  color: green

inputs:
  upstream:
    description: <user>/<repo> or the full HTTP URL
    required: false
  branch:
    description: The upstream branch that is rebased on
    required: false
    default:  master
  depth:
    description: Greater than the number of commits the upstream made in a period
    required: false
    default:  100
  push:
    description: Do the force push in this action
    required: false
    default:  true

outputs:
  has_new_commits:
    description: True when new commits were included in this rebase
    value: ${{ steps.check.outputs.has_new_commits }}

runs:
  using: composite
  steps:
    - run: |
        set -ex;

        OLD_COMMIT_HASH=$(git rev-parse HEAD);
        UPSTREAM=${{ inputs.upstream }};
        if [ -z $UPSTREAM ]; then
            echo ${{ github.token }} | gh auth login --with-token;
            UPSTREAM=$(gh api repos/:owner/:repo --jq .parent.full_name);
            if [ -z $UPSTREAM ]; then echo "Can't find upstream" >&2 && exit 1; fi;
        fi;
        if [ ! $(echo $UPSTREAM | egrep '^(http|git@)') ]; then
            UPSTREAM=https://github.com/$UPSTREAM.git
        fi;
        if [ ${{ inputs.depth }} -ne 0 ]; then
            DEPTH=--depth=${{ inputs.depth }}
        fi;

        git remote add upstream $UPSTREAM;

        git fetch upstream ${{ inputs.branch }} $DEPTH;

        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com";
        git config --local user.name  "GitHub Actions";

        git rebase upstream/${{ inputs.branch }};

        NEW_COMMIT_HASH=$(git rev-parse HEAD);
        if [ "${LOCAL_COMMIT_HASH}" = "${UPSTREAM_COMMIT_HASH}" ]; then
            echo "has_new_commits=false" >> $GITHUB_OUTPUT
            echo 'There are no new commits in upstream' 1>&1;
        else
            echo "has_new_commits=true" >> $GITHUB_OUTPUT
            echo 'There are new commits that was been merged' 1>&1;
        fi

        if [ "${{ inputs.push }}" = "true" -a "$(git status | grep diverged)" ]; then
            git push origin $(git branch --show-current) --force-with-lease;
        fi;
      shell: bash
